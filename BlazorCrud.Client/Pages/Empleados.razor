@page "/empleados"

@using BlazorCrud.Shared;
@using CurrieTechnologies.Razor.SweetAlert2;
@using BlazorCrud.Client.Services;


@inject SweetAlertService Swal;
@inject IEmpleadoService empleadoService;

<h3>Empleados</h3>

<a class="btn btn-success btn-sm-mb3" href="empleado">Nuevo Empleado</a>

<table class="table table-striped">
	<thead>
		<tr>
			<th>Id</th>
			<th>Nombre</th>
			<th>Correo</th>
			<th>Fecha Ingreso</th>
			<th>Activo</th>
			<th>Acciones</th>
		</tr>
	</thead>
	<tbody>
		@if (listaEmpleado == null)
		{
			<tr>
				<td colspan="6">No hay empleados</td>
			</tr>

		}
		else
		{
			foreach (var item in listaEmpleado)
			{
				<tr>
					<td>@item.IdEmpleado</td>
					<td>@item.NombreCompleto</td>
					<td>@item.Correo</td>
					<td>@item.FechaInicio</td>
					<td>@item.Activo</td>
					<td>
						<a class="btn btn-primary btn-sm" href="empleado/@item.IdEmpleado"><i class="bi bi-pencil-square"></i></a>
						<button class="btn btn-danger btn-sm" @onclick="(() => Eliminar(item.IdEmpleado))"><i class="bi bi-pencil-trash"></i></button>
					</td>

				</tr>

			}
		}
	</tbody>

</table>

@code {

	List<EmpleadoDTO>? listaEmpleado = null;


	protected override async Task OnInitializedAsync()
	{
		listaEmpleado = await empleadoService.Lista();
	}

	private async Task Eliminar(int id)
	{
		var result = await Swal.FireAsync(new SweetAlertOptions
			{
				Title = "¿Estás seguro?",
				Text = "No podrás revertir esto",
				Icon = SweetAlertIcon.Warning,
				ShowCancelButton = true,
				ConfirmButtonText = "Sí, eliminar",
				CancelButtonText = "Cancelar"
			});

		if (result.IsConfirmed)
		{
			var eliminado = await empleadoService.Eliminar(id);
			if (eliminado)
				await Swal.FireAsync("Eliminado", "El empleado ha sido eliminado", SweetAlertIcon.Success);
			listaEmpleado = listaEmpleado!.FindAll(e => e.IdEmpleado != id);

		}
	}
}
